import logging
import pandas as pd
import asyncio
from reminders.daily import DailyWaterReminder

import logging

from aiogram import types
from aiogram.dispatcher import filters
from db.utils import execute_query
from db.user import insert_user
from db import db,cursor
from db.liquid import insert_liquid_intake
from message import KEYBOARD_TEXT
from kb.start_keyboard import StartKeyboard
from kb.meta import MetaKeyboard
from kb.add_liquid import AddLiquidKeyboard
from kb.liquid_statistic import LiquidStatsKeyboard
from kb.back import back_kb
from states.liquid_state import LiquidStates
from states.meta_state import MetaStates
from loader import dp, bot
from liquid_stats import info, trends, balance
from db.create import create_tables
from dotenv import load_dotenv
load_dotenv()


def generate_dataframe_from_mysql(user_id):
    query = """
        SELECT *
        FROM liquidIntake
        JOIN user ON liquidIntake.user_id = user.user_id
        WHERE liquidintake.user_id = %s;
        """

    # Execute the SQL query
    result = execute_query(query, user_id)

    # Create a DataFrame from the rows and column names
    df = pd.DataFrame.from_dict(result)
    return df



# Configure logging
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    user = message.from_user
    user_id = user.id
    username = user.username
    print(user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    query = "SELECT * FROM User WHERE user_id = %s"
    result = execute_query(query, user_id)
    
    if not result:
        insert_user(user_id, username)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    keyboard = StartKeyboard(user_id)


    await message.reply("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä—ñ–¥–∏–Ω–∏, —è–∫—É –≤–∏ –≤–∂–∏–≤–∞—î—Ç–µ. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=keyboard.get_keyboard())

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('statistic')))
async def statistics(message: types.Message):
    await message.reply("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∞—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω–Ω—ñ:", reply_markup=LiquidStatsKeyboard().get_keyboard())

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢—Ä–µ–Ω–¥–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('hourly')))
async def statistics_hourly(message: types.Message):
    user_id = message.from_user.id
    df = generate_dataframe_from_mysql(user_id)
    chart_buf = trends.create_trend(df)
    chart = types.InputFile(chart_buf, filename='result.png')
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await message.answer_photo(chart)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('total')))
async def statistics_total(message: types.Message):
    user_id = message.from_user.id
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = info.get_formated_statistics(user_id)
    await message.reply(result)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–∞–ª–∞–Ω—Å –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('balance')))
async def statistics_total(message: types.Message):
    user_id = message.from_user.id
    df = generate_dataframe_from_mysql(user_id)
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = balance.balance_liquid(df)
    await message.reply(result)

@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('back')))
async def back(message: types.Message):
    user_id = message.from_user.id
    await message.reply("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=StartKeyboard(user_id).get_keyboard())


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —Ä—ñ–¥–∏–Ω—É"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('add_liquid')))
async def add_liquid(message: types.Message):
    await message.reply("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä—ñ–¥–∏–Ω–∏, —è–∫—É –≤–∏ –≤–∂–∏–≤–∞—î—Ç–µ:", reply_markup=AddLiquidKeyboard().get_keyboard())


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('liq_'))
async def process_callback_liquid(callback_query: types.CallbackQuery):
    code = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    states = LiquidStates().all()
    state_idx = states.index(code)

    #set state
    state = dp.current_state(user=user_id)

    await state.set_state(LiquidStates().all()[state_idx])
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—É —Ä—ñ–¥–∏–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await callback_query.message.bot.send_message(chat_id=user_id, text=f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∂–∏—Ç–æ—ó —Ä—ñ–¥–∏–Ω–∏ —É –º–ª –¥–ª—è —Ç–∏–ø—É {KEYBOARD_TEXT.get(code)}:",reply_markup=back_kb)


@dp.message_handler(state=LiquidStates.all())
async def add_liquid_amount(message: types.Message):
    liquid = message.text
    user_id = message.from_user.id
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—É —Ä—ñ–¥–∏–Ω–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    state = dp.current_state(user=user_id)
    liquid_type = await state.get_state()

    if message.text == KEYBOARD_TEXT['back']:
        await message.answer("–í—ñ–¥–º—ñ–Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—ñ–¥–∏–Ω–∏", reply_markup=StartKeyboard(user_id).get_keyboard())
        await message.reply("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä—ñ–¥–∏–Ω–∏, —è–∫—É –≤–∏ –≤–∂–∏–≤–∞—î—Ç–µ:", reply_markup=AddLiquidKeyboard().get_keyboard())
        await state.reset_state()
        return

    if liquid.isdigit():
        try:
            amount = float(liquid)

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –≤–∂–∏—Ç—É —Ä—ñ–¥–∏–Ω—É
            insert_liquid_intake(user_id, liquid_type, amount)
            await state.reset_state()
            DailyWaterReminder().update_reminder(user_id)
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
            await message.reply(f"–ó–∞–ø–∏—Å –ø—Ä–æ –≤–∂–∏—Ç—É —Ä—ñ–¥–∏–Ω—É –¥–æ–¥–∞–Ω–æ:\n–¢–∏–ø: {KEYBOARD_TEXT.get(liquid_type)}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {liquid} –º–ª",reply_markup=StartKeyboard(user_id).get_keyboard())
        except ValueError:
            # –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞.")
    else:
        # –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ —á–∏—Å–ª–∞.")

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ—Ç–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT['meta']))
async def meta(message: types.Message):
    user = message.from_user
    user_id = user.id
    states = MetaStates().all()
    state_idx = states.index('weight')
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    query = "SELECT * FROM User WHERE user_id = %s"
    result = execute_query(query, user_id)
    if not result[0].get('weight'):
        await message.reply("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥:",reply_markup=MetaKeyboard().get_keyboard())
        state = dp.current_state(user=user_id)
        await state.set_state(MetaStates().all()[state_idx])
    await message.reply(f"–ú–µ—Ç–∞: {result[0]['water_meta_amount']} –º–ª", reply_markup=MetaKeyboard().get_keyboard())



# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ú–µ—Ç–∏"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('update_meta')))
async def meta_update(message: types.Message):
    user = message.from_user
    user_id = user.id
    states = MetaStates().all()
    state_idx = states.index('weight')

    await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥:",reply_markup=MetaKeyboard().get_keyboard())
    state = dp.current_state(user=user_id)
    await state.set_state(MetaStates().all()[state_idx])


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ—è –ú–µ—Ç–∞"
@dp.message_handler(filters.Text(equals=KEYBOARD_TEXT.get('meta_info')))
async def meta_info(message: types.Message):
    user = message.from_user
    user_id = user.id
    query = "SELECT * FROM User WHERE user_id = %s"
    result = execute_query(query, user_id)
    row = result[0]
    weight = row.get('weight')
    water_meta_amount = row.get('water_meta_amount')

    today_water = info.today_statistics(user_id)

    is_meta_accomplished = water_meta_amount <= today_water
    if is_meta_accomplished:
        await message.reply(f"–í–∞—à–∞ –≤–∞–≥–∞: {weight} –∫–≥\n–ú–µ—Ç–∞: {water_meta_amount} –º–ª\n–í–∏–ø–∏—Ç–æ –≤–æ–¥–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_water} –º–ª\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–ø–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ–¥–∏ —Å—å–æ–≥–æ–¥–Ω—ñ!", reply_markup=MetaKeyboard().get_keyboard())
    else:
        await message.reply(f"–í–∞—à–∞ –≤–∞–≥–∞: {weight} –∫–≥\n–ú–µ—Ç–∞: {water_meta_amount} –º–ª\n–í–∏–ø–∏—Ç–æ –≤–æ–¥–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_water} –º–ª\n–î–æ –º–µ—Ç–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å {water_meta_amount - today_water} –º–ª", reply_markup=MetaKeyboard().get_keyboard())



@dp.message_handler(state=MetaStates.WEIGHT)
async def meta_weight(message: types.Message):
    user_id = message.from_user.id
    weight = message.text
    state = dp.current_state(user=user_id)

    if weight.isdigit():
        try:
            weight = float(weight)
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            query = "UPDATE user SET weight = %s, water_meta_amount = %s WHERE user_id = %s"
            water_meta_amount = weight * 30
            execute_query(query, weight, water_meta_amount, user_id)
            await message.reply("–í–∞–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=StartKeyboard(user_id).get_keyboard())
            await state.reset_state()
        except ValueError:
            await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥:")
    else:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥:")



daily_water_reminder = DailyWaterReminder()


async def start_schedule():
    await daily_water_reminder.schedule_water_reminder()

# Start the bot
async def start_bot():
    await bot.set_my_commands([types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞")])
    await dp.start_polling()

# Run the bot and schedule concurrently
async def main():

     await asyncio.gather(start_schedule(), start_bot())


if __name__ == '__main__':
    try:
        create_tables()
        asyncio.run(main())
    finally:
        # Close the database connection on exit
        cursor.close()
        db.close()